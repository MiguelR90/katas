"""
You are given a 0-indexed array nums and an integer target.

A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself.

Return the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.
"""


def minsize_subarray_infinite_array_v1(nums: list[int], target: int) -> int:
    n: int = len(nums)
    minsize: int = n + 1

    for left in range(n):
        cursum = 0
        for right in range(left, n * 10):
            cursum += nums[right % n]

            if cursum == target:
                minsize = min(minsize, right - left + 1)
            elif cursum > target:
                break

    if minsize > len(nums):
        return -1

    return minsize


import sys


def minsize_subarray_infinite_array_v2(nums: list[int], target: int) -> int:
    n = len(nums)
    minsize = sys.maxsize
    # maxwraps = target // min(nums) + 1

    cursum = 0
    left = 0
    right = 0
    # for right in range(n * maxwraps):
    while left < n:
        cursum += nums[right % n]

        while cursum > target and left <= right:
            cursum -= nums[left % n]
            left += 1

        if cursum == target:
            minsize = min(minsize, right - left + 1)

        right += 1

    return minsize if minsize != sys.maxsize else -1


# minsize_subarray_infinite_array = minsize_subarray_infinite_array_v1
minsize_subarray_infinite_array = minsize_subarray_infinite_array_v2


def test():
    assert minsize_subarray_infinite_array(nums=[1, 2, 3], target=5) == 2
    assert minsize_subarray_infinite_array(nums=[1, 1, 1, 2, 3], target=4) == 2
    assert minsize_subarray_infinite_array(nums=[2, 4, 6, 8], target=3) == -1
    assert minsize_subarray_infinite_array(nums=[1], target=6) == 6


def main():
    _ = minsize_subarray_infinite_array([1, 2, 3], 5)


if __name__ == "__main__":
    main()
